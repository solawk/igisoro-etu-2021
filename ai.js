export function AI(t,e,o){this.connector=t,this.game=this.connector.Callers.Server,this.side=e,this.connector.Callers.Client.aiSide=this.side,this.settings=o,this.React()}function NodeFromGame(t){return new Node(null,t.state,[...t.bottomOccupations],[...t.topOccupations],t.turn,t.pit,t.sowPit,t.normalCaptureMade,t.turnsMade,t.reverseLevel)}function ExpandTree(t,e){expansionsCount=0,totalChildren=0,t.expand(e,negInfinity,posInfinity,"bottom"===t.turn)}function Node(t,e,o,s,n,i,r,c,a,l){this.moveThatLedToMe=t,this.state=e,this.bottomOccupations=o,this.topOccupations=s,this.turn=n,this.pit=i,this.sowPit=r,this.normalCaptureMade=c,this.turnsMade=a,this.reverseLevel=l,this.parent=null,this.children=[]}AI.prototype.React=function(){this.connector.Callers.Server.turn===this.side&&this.MakeMove()},AI.prototype.MakeMove=function(){const t=NodeFromGame(this.game),e="bottom"===t.turn;ExpandTree(t,this.settings.depth);const o=[],s=[];let n=negInfinity,i=posInfinity;for(let r=0;r<16;r++){let c=!1,a=0;for(const o of t.children)if(o.moveThatLedToMe===r){c=!0,(a=e?o.score:-o.score)>n&&(n=a),a<i&&(i=a);break}s.push(c?2:0),o.push(c?a:0)}let r=0;for(let t=0;t<16;t++)s[t]&&(o[t]<n?(s[t]=1,o[t]=0):(r++,o[t]=1));const c=r/t.children.length,a=this.settings.randomness/100,l=function(t,e,o){return t*(1-o)+e*o};for(let t=0;t<16;t++)1!==s[t]?2===s[t]&&(o[t]=l(1,c,a)):o[t]=l(0,c,a);let h=-1,p=0;for(let t=0;t<16;t++)p+=o[t];let u=Math.random()*p;for(let t=0;t<16;t++)if((u-=o[t])<=0){h=t;break}const d=this,f=setInterval(function(){"Idle"===d.connector.Callers.Server.state&&(d.connector.ClientToServerCallbacks.StartMove.call(d.connector.Callers.Server,h,d.side),clearInterval(f)),"ReverseIdle"===d.connector.Callers.Server.state&&(setTimeout(function(){d.connector.ClientToServerCallbacks.StartMove.call(d.connector.Callers.Server,h,d.side)},1e3),clearInterval(f))},50)},Node.prototype.moves=function(){const t="top"===this.turn?this.topOccupations:this.bottomOccupations,e=[];if("ReverseIdle"!==this.state)for(let o=0;o<16;o++)t[o]>1&&e.push(o);else{const t=game.GetReverseIndexes(this.pit);e.push(t[0]),e.push(t[1])}return e};const negInfinity=-100,posInfinity=100;let expansionsCount=0,totalChildren=0;function incExpansions(){++expansionsCount%1e4==0&&(console.log("Expansions: "+expansionsCount),console.log("Branching: "+totalChildren/expansionsCount))}function incChildren(){totalChildren++}Node.prototype.expand=function(t,e,o,s){if(0===t)return this.score=this.evaluate(),this.score;const n=this.moves();this.score=s?negInfinity:posInfinity;for(let i of n){const n=new gameConnector.GameConnector;n.Dummy();const r=game.StartGame(this.turn,-1,{topOccupations:this.topOccupations,bottomOccupations:this.bottomOccupations},this.reverseLevel,n);r.state=this.state,r.pit=this.pit,r.sowPit=this.sowPit,r.normalCaptureMade=this.normalCaptureMade,r.turnsMade=this.turnsMade,r.reverseLevel=this.reverseLevel,n.Callers.Server=r,n.ClientToServerCallbacks.StartMove=r.StartMove,n.ClientToServerCallbacks.StartMove.call(n.Callers.Server,i,this.turn);const c=NodeFromGame(r);c.moveThatLedToMe=i,c.parent=this,this.children.push(c);const a="ReverseIdle"===c.state,l="Over"===c.state;if("Timeout"===c.state)c.score=this.evaluate();else if(l)c.score=s?negInfinity:posInfinity;else if(s){if(this.score=Math.max(this.score,c.expand(a?t:t-1,e,o,a)),(e=Math.max(e,this.score))>o)break}else if(this.score=Math.min(this.score,c.expand(a?t:t-1,e,o,!a)),(o=Math.min(o,this.score))<e)break}return this.score},Node.prototype.evaluate=function(){let t=0;for(const e of this.bottomOccupations)t+=e;return t},Node.prototype.print=function(t){let e="--".repeat(t);const o="ReverseIdle"===this.state,s=o?this.turn:"top"===this.turn?"bottom (min next)":"top (max next)";console.log(e+" Node of "+s+"'s"+(o?" reversing":"")+" turn:"),console.log(e+" Pressed "+this.moveThatLedToMe);let n="[";for(const t of this.children)n+=t.score+",";n+="]",console.log(e+" Score: "+this.score+n),console.log(this.topOccupations.slice(8,16).reverse()),console.log(this.topOccupations.slice(0,8)),console.log(this.bottomOccupations.slice(0,8).reverse()),console.log(this.bottomOccupations.slice(8,16)),console.log("Children:"),console.log("{");for(const e of this.children)e.print(t+1);console.log("}")};