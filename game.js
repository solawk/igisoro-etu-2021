function Game(t,e,i,s,o){this.Connector=o,this.SetGame(i,t,e,s)}function GetReverseIndexes(t){return 1===t?[0,2]:6===t?[5,7]:8===t?[7,9]:15===t?[14,0]:void 0}function GetOpposingIndexes(t){return[7-t,8+t]}!function(t){t.StartGame=function(t,e,i,s,o){return new Game(t,e,i,s,o)},t.FieldToString=function(t,e){let i="";for(let e=0;e<16;e++)i+=t[e].toString()+",";for(let t=0;t<16;t++)i+=e[t].toString()+",";return i},t.TopOccFromFieldString=function(t){let e=[];const i=t.split(",",32);for(let t=0;t<16;t++)e.push(parseInt(i[t]));return e},t.BottomOccFromFieldString=function(t){let e=[];const i=t.split(",",32);for(let t=16;t<32;t++)e.push(parseInt(i[t]));return e},t.GetReverseIndexes=GetReverseIndexes}("undefined"==typeof exports?this.game={}:exports),Game.prototype.StartMove=function(t,e){if("Idle"===this.state||"ReverseIdle"===this.state)if(-1===this.stepTime){this.callStack=[],this.callStack.push({f:this.MakeStep,i:t,s:e});const i=Date.now();for(;this.callStack.length>0;){if(Date.now()-i>10){this.state="Timeout";break}const t=this.callStack.shift();t.f.call(this,t.i,t.s)}}else this.MakeStep(t,e)},Game.prototype.DispatchMove=function(t,e,i){const s=this;if(-1===this.stepTime)this.callStack.push({f:this.MakeStep,i:t,s:e});else{const o=i?this.boost?.2*this.stepTime:this.stepTime:0;setTimeout(function(){s.MakeStep(t,e)},o)}},Game.prototype.GetOccupation=function(t,e){return"bottom"===t?this.bottomOccupations[e]:"top"===t?this.topOccupations[e]:"hand"===t?this.handOccupation:void 0},Game.prototype.SetOccupation=function(t,e,i){"bottom"===t&&(this.bottomOccupations[e]=i),"top"===t&&(this.topOccupations[e]=i),"hand"===t&&(this.handOccupation=i),this.Connector.ServerToClientCallbacks.SetOccupation.call(this.Connector.Callers.Client,t,e,i)},Game.prototype.DeltaOccupation=function(t,e,i){this.SetOccupation(t,e,this.GetOccupation(t,e)+i)},Game.prototype.CreateTransfer=function(t,e,i,s,o){this.Connector.ServerToClientCallbacks.AddTransfer.call(this.Connector.Callers.Client,t,e,i,s,o)},Game.prototype.SwitchTurn=function(){this.boost=!1,this.turn=this.GetOtherSide(),this.Connector.ServerToClientCallbacks.SetTurn.call(this.Connector.Callers.Client,this.turn)},Game.prototype.NextPit=function(){this.pit=(this.pit+1)%16},Game.prototype.PrevPit=function(){this.pit=(this.pit+15)%16},Game.prototype.ChooseSowPit=function(){this.pit=this.sowPit},Game.prototype.GetOtherSide=function(){return"top"===this.turn?"bottom":"top"},Game.prototype.SetState=function(t){this.state=t},Game.prototype.GameOver=function(t){this.state="Over",this.Connector.ServerToClientCallbacks.GameOver.call(this.Connector.Callers.Client,t)},Game.prototype.MakeStep=function(t,e){if(this.CheckGameOver(this.GetOtherSide()))this.GameOver(this.turn);else switch(this.state){case"Idle":return this.actionIdle(t,e);case"ReverseIdle":return this.actionReverseIdle(t,e);case"SideCheck":return this.actionSideCheck(t,e);case"OccupationCheck":return this.actionOccupationCheck(t,e);case"ReverseCheck":return this.actionReverseCheck();case"CaptureCheck":return this.actionCaptureCheck();case"Capture":return this.actionCapture();case"Grab":return this.actionGrab("f");case"Put":return this.actionPut("f");case"ReverseGrab":return this.actionGrab("b");case"ReversePut":return this.actionPut("b");case"PutEnd":return this.actionPutEnd();case"End":return this.actionEnd()}},Game.prototype.actionIdle=function(t,e){this.SetState("SideCheck"),this.DispatchMove(t,e,!1)},Game.prototype.actionSideCheck=function(t,e){e===this.turn?(this.SetState("OccupationCheck"),this.DispatchMove(t,e,!1)):this.SetState("Idle")},Game.prototype.actionOccupationCheck=function(t,e){let i;(i="bottom"===e?this.bottomOccupations[t]:this.topOccupations[t])>1?(this.SetState("ReverseCheck"),this.sowPit=t,this.pit=t,this.DispatchMove(t,e,!1)):this.SetState("Idle")},Game.prototype.actionReverseCheck=function(){"possible"===this.ReverseAllowed()&&this.CheckReversible(this.turn,this.pit)?(this.SetState("ReverseIdle"),this.Connector.ServerToClientCallbacks.Reverse.call(this.Connector.Callers.Client,this.pit)):this.SetState("Grab"),this.DispatchMove(null,null,!1)},Game.prototype.actionReverseIdle=function(t){let e=GetReverseIndexes(this.pit);t===e[0]&&(this.SetState("ReverseGrab"),this.Connector.ServerToClientCallbacks.Reverse.call(this.Connector.Callers.Client,-1),this.sowPit=this.pit,this.DispatchMove(null,null,!1)),t===e[1]&&(this.SetState("Grab"),this.Connector.ServerToClientCallbacks.Reverse.call(this.Connector.Callers.Client,-1),this.DispatchMove(null,null,!1))},Game.prototype.actionCaptureCheck=function(){this.CheckCapture(this.pit)?(this.SetState("Capture"),this.DispatchMove(null,null,!0)):(this.SetState("ReverseCheck"),this.DispatchMove(null,null,!1))},Game.prototype.actionCapture=function(){let t=GetOpposingIndexes(this.pit),e=this.GetOccupation(this.GetOtherSide(),t[0]),i=this.GetOccupation(this.GetOtherSide(),t[1]),s=e+i;this.SetOccupation(this.GetOtherSide(),t[0],0),this.SetOccupation(this.GetOtherSide(),t[1],0),this.DeltaOccupation(this.turn,this.sowPit,s),this.normalCaptureMade=!0,"possible"===this.ReverseAllowed()&&this.CheckReversible(this.turn,this.sowPit)||-1===this.stepTime?(this.CreateTransfer(e,this.GetOtherSide(),t[0],this.turn,this.sowPit),this.CreateTransfer(i,this.GetOtherSide(),t[1],this.turn,this.sowPit),this.ChooseSowPit(),this.SetState("ReverseCheck")):(this.CreateTransfer(e,this.GetOtherSide(),t[0],"hand",0),this.CreateTransfer(i,this.GetOtherSide(),t[1],"hand",0),this.SetOccupation(this.turn,this.sowPit,0),this.SetOccupation("hand",0,s),this.ChooseSowPit(),this.NextPit(),this.SetState("Put")),this.DispatchMove(null,null,!0)},Game.prototype.actionGrab=function(t){this.sowPit=this.pit;let e=this.GetOccupation(this.turn,this.pit);if(this.SetOccupation(this.turn,this.pit,0),-1===this.stepTime){for(let i=0;i<e;i++)"f"===t?this.NextPit():this.PrevPit(),this.DeltaOccupation(this.turn,this.pit,1);this.SetState("PutEnd")}else this.SetOccupation("hand",0,e),this.CreateTransfer(e,this.turn,this.pit,"hand",0),"f"===t?(this.NextPit(),this.SetState("Put")):(this.PrevPit(),this.SetState("ReversePut"));this.DispatchMove(null,null,!0)},Game.prototype.actionPut=function(t){this.DeltaOccupation(this.turn,this.pit,1),this.DeltaOccupation("hand",0,-1),this.CreateTransfer(1,"hand",0,this.turn,this.pit),0===this.GetOccupation("hand",0)?this.SetState("PutEnd"):"f"===t?this.NextPit():this.PrevPit(),this.DispatchMove(null,null,!0)},Game.prototype.actionPutEnd=function(){this.GetOccupation(this.turn,this.pit)>1?(this.SetState("CaptureCheck"),this.DispatchMove(null,null,!0)):(this.SetState("End"),this.DispatchMove(null,null,!1))},Game.prototype.actionEnd=function(){this.CheckGameOver(this.turn)?this.GameOver(this.GetOtherSide()):(this.pit=-1,this.sowPit=-1,this.normalCaptureMade=!1,this.turnsMade++,this.SetState("Idle"),this.SwitchTurn())},Game.prototype.CheckCapture=function(t,e=0,i=0){if(t>7)return!1;if(this.GetOccupation(this.turn,t)<2-i-e)return!1;let s=GetOpposingIndexes(t);return 0!==this.GetOccupation(this.GetOtherSide(),s[0])&&0!==this.GetOccupation(this.GetOtherSide(),s[1])},Game.prototype.ReverseAllowed=function(){return 3===this.reverseLevel?"possible":0===this.reverseLevel?"no reverses allowed":1===this.reverseLevel&&!1===this.normalCaptureMade?"no normal captures made":this.turnsMade<4?"turns made: "+this.turnsMade:"possible"},Game.prototype.CheckReversible=function(t,e){if(1!==e&&6!==e&&8!==e&&15!==e)return!1;let i=this.GetOccupation(t,e);if(i<2)return!1;let s=0;for(;i>15;)i-=16,s++;let o=e-i;return o<0&&(o+=16),this.CheckCapture(o,s,1)},Game.prototype.CheckGameOver=function(t){if("bottom"===t)for(let t=0;t<16;t++){if(2===this.bottomOccupations[t]&&1===this.bottomOccupations[(t+1)%16]){let e=!0;for(let i=0;i<14;i++)if(0!==this.bottomOccupations[(t+i+2)%16]){e=!1;break}if(e)return!0}if(this.bottomOccupations[t]>1)return!1}else for(let t=0;t<16;t++){if(2===this.topOccupations[t]&&1===this.topOccupations[(t+1)%16]){let e=!0;for(let i=0;i<14;i++)if(0!==this.topOccupations[(t+i+2)%16]){e=!1;break}if(e)return!0}if(this.topOccupations[t]>1)return!1}return!0},Game.prototype.SetGame=function(t,e,i,s){this.topOccupations=[],this.bottomOccupations=[],this.handOccupation=0,this.state="Idle",this.turn=e,this.pit=-1,this.sowPit=-1,this.stepTime=i,this.boost=!1,this.reverseLevel=s,this.normalCaptureMade=!1,this.turnsMade=0,this.LoadPitOccupation(t)},Game.prototype.LoadPitOccupation=function(t){for(let e=0;e<16;e++)this.topOccupations[e]=t.topOccupations[e],this.bottomOccupations[e]=t.bottomOccupations[e];this.hand=0};